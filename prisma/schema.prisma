// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// schema.prisma
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
    provider = "postgresql"
    
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url=env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    createdAt     DateTime       @default(now())
    role          UserRole       @default(USER)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Task {
    id              Int          @id @default(autoincrement())
    title           String
    content         String?
    importanceScore Int          @default(0)
    deadline        DateTime?
    status          TaskStatus   @default(TODO)
    category        TaskCategory
    createdAt       DateTime     @default(now())
    updatedAt       DateTime     @updatedAt
}

enum UserRole {
    USER
    ADMIN
}

// model UserPrivilege {
//     id      Int     @id @default(autoincrement())
//     userId  String  @unique
//     isUser  Boolean @default(true)
//     isAdmin Boolean @default(false)
//     user    User?   @relation(fields: [userId], references: [id])
// }

enum TaskStatus {
    TODO
    IN_PROGRESS
    DONE
}

enum TaskCategory {
    Defensive
    General
    Offensive
}
